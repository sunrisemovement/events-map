# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/airrecord/all/airrecord.rbi
#
# airrecord-1.0.2

module Airrecord
  def api_key; end
  def api_key=(arg0); end
  def self.table(api_key, base_key, table_name); end
  def throttle; end
  def throttle=(arg0); end
  def throttle?; end
  extend Airrecord
end
module Airrecord::QueryString
  def self.decode(query); end
  def self.encode(params); end
  def self.escape(*query); end
end
module Airrecord::QueryString::Encodings
  def self.[](value); end
end
class Airrecord::FaradayRateLimiter < Faraday::Middleware
  def call(env); end
  def clear; end
  def initialize(app, requests_per_second: nil, sleeper: nil); end
  def requests; end
  def self.requests; end
  def self.requests=(arg0); end
  def too_many_requests_in_last_second?; end
  def wait; end
  def window_span; end
end
class Airrecord::Client
  def api_key; end
  def connection; end
  def connection=(arg0); end
  def escape(*args); end
  def handle_error(status, error); end
  def initialize(api_key); end
  def parse(body); end
end
class Airrecord::Table
  def ==(other); end
  def [](key); end
  def []=(key, value); end
  def client; end
  def create; end
  def created_at; end
  def created_at=(created_at); end
  def destroy; end
  def eql?(other); end
  def fields; end
  def fields=(fields); end
  def hash; end
  def id; end
  def initialize(fields, id: nil, created_at: nil); end
  def new_record?; end
  def save; end
  def self.all(filter: nil, sort: nil, view: nil, offset: nil, paginate: nil, fields: nil, max_records: nil, page_size: nil); end
  def self.api_key; end
  def self.api_key=(arg0); end
  def self.base_key; end
  def self.base_key=(arg0); end
  def self.belongs_to(method_name, options); end
  def self.client; end
  def self.create(fields); end
  def self.find(id); end
  def self.find_many(ids); end
  def self.has_many(method_name, options); end
  def self.has_one(method_name, options); end
  def self.records(filter: nil, sort: nil, view: nil, offset: nil, paginate: nil, fields: nil, max_records: nil, page_size: nil); end
  def self.table_name; end
  def self.table_name=(arg0); end
  def serializable_fields; end
  def updated_keys; end
  def validate_key(key); end
end
class Airrecord::Error < StandardError
end
